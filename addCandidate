
import org.flowable.task.api.Task
import org.flowable.engine.TaskService
import org.flowable.engine.RuntimeService


def participantUserIdsNode = execution.getVariable("pyids") as com.fasterxml.jackson.databind.node.ArrayNode
List<String> participantUserIds = participantUserIdsNode.collect { it.asText() }

String taskId = execution.getVariable("taskId") as String
String processId = execution.getVariable("processId") as String


// Get the TaskService instance
TaskService taskService = processEngine.getTaskService()

// Get the task using the task ID
Task task = taskService.createTaskQuery().taskId(taskId).singleResult()
println "******** $participantUserIds"

// Add participants to the task
for (String participantUserId : participantUserIds) {
   	taskService.addUserIdentityLink(task.getId(), participantUserId, "candidate");
}

// execution.setVariable("ids", "eaas001")

================================================================================================================================



import org.flowable.task.api.Task
import org.flowable.engine.TaskService
import org.flowable.engine.RuntimeService
import com.fasterxml.jackson.databind.ObjectMapper

// Retrieve the "output" variable from execution
def output = execution.getVariable("output")

// Create an instance of ObjectMapper
ObjectMapper mapper = new ObjectMapper()

// Convert "output.data" to a tree-like structure
def entities = mapper.valueToTree(output.data)

// Retrieve the value of "PY_Ids" from the first element of "entities"
def pyIdsNode = entities[0].get("PY_Ids")

// Convert "pyIdsNode" to a List of participantUserIds
def participantUserIds = mapper.convertValue(pyIdsNode, List)

// Get the TaskService instance
TaskService taskService = processEngine.getTaskService()

// Get the task using the task ID
Task task = taskService.createTaskQuery().taskId(taskId).singleResult()

// Add participants to the task
for (String participantUserId : participantUserIds) {
   taskService.addUserIdentityLink(task.getId(), participantUserId, "candidate")
}

import org.flowable.task.api.Task;
import org.flowable.engine.TaskService;
import org.flowable.engine.RuntimeService;
import com.fasterxml.jackson.databind.ObjectMapper;

// Retrieve the "output" variable from execution
def output = execution.getVariable("output");
String taskId = execution.getVariable("taskId") as String

// Create an instance of ObjectMapper
ObjectMapper mapper = new ObjectMapper();

if (output != null && output.data != null) {
    // Convert "output.data" to a tree-like structure
    def entities = mapper.valueToTree(output.data);

    if (entities != null && entities.isArray() && entities.size() > 0) {
        // Retrieve the value of "PY_Ids" from the first element of "entities"
        def pyIdsNode = entities[0].get("PY_Ids");

        if (pyIdsNode != null) {
            // Convert "pyIdsNode" to a List of participantUserIds
            def participantUserIds = mapper.convertValue(pyIdsNode, List);

            // Get the TaskService instance
            TaskService taskService = processEngine.getTaskService();

            // Get the task using the task ID
            Task task = taskService.createTaskQuery().taskId(taskId).singleResult();

            if (task != null) {
                // Add participants to the task
                for (String participantUserId : participantUserIds) {
                    taskService.addUserIdentityLink(task.getId(), participantUserId, "candidate");
                }
            } else {
                throw new RuntimeException("Task not found with ID: " + taskId);
            }
        } else {
            throw new RuntimeException("PY_Ids not found in entities");
        }
    } else {
        throw new RuntimeException("Invalid entities structure");
    }
} else {
    throw new RuntimeException("Output or output.data is null");
}

